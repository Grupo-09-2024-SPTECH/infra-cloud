AWSTemplateFormatVersion: 2010-09-09
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Global
        Parameters:
          - Client
      - Label:
          default: VPC
        Parameters:
          - VpcCidr
          - VpcPublicSubnetZone
          - VpcPublicSubnetCidr
      - Label:
          default: EC2
        Parameters:
          - Ec2KeyPairName
          - Ec2AmiId
          - Ec2IamInstanceProfile
          - Ec2JupyterPassword
    ParameterLabels:
      Client:
        default: Cliente
      VpcCidr:
        default: VPC CIDR
      VpcPublicSubnetCidr:
        default: Subnet Publico CIDR
      VpcPublicSubnetZone:
        default: Zona da Subnet Publica
      Ec2KeyPairName:
        default: Chave de Acesso
      Ec2AmiId:
        default: AMI
      Ec2IamInstanceProfile:
        default: IAM Instance Profile Id
      Ec2JupyterPassword:
        default: Senha Jupyter
Parameters:
  Client:
    Type: String
    Description: O nome do cliente
    Default: sptech
  VpcCidr:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: O bloco CIDR da VPC (ex. 10.10.0.0/24)
    Default: 10.100.0.0/24
  VpcPublicSubnetCidr:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: O bloco CIDR da Subnet Publica (ex. 10.10.0.0/24)
    Default: 10.100.0.0/24
  VpcPublicSubnetZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: A zona de disponibilidade para criar a Subnet Publica
    Default: us-east-1a
  Ec2KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Chave de acesso a instancia
  Ec2AmiId:
    Type: String
    Description: Id da AMI
    # Default: ami-0f9fc25dd2506cf6d # UNIX
    # Default: ami-0c55b159cbfafe1f0   # Ubuntu 18.04
    Default: ami-04b70fa74e45c3917 # Ubuntu 24.04
  Ec2IamInstanceProfile:
    Type: String
    Description: O nome do Instance Profile
    Default: EMR_EC2_DefaultRole
  Ec2JupyterPassword:
    Type: String
    NoEcho: true
    Description: A senha de acesso ao jupyter
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${Client}
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${Client}
  InternetGatewayAttachment:
    DependsOn: [InternetGateway, Vpc]
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  PublicRouteTable:
    DependsOn: Vpc
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${Client}-public
  PublicRouteTableRouteInternet:
    DependsOn: [PublicRouteTable, InternetGateway]
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref VpcPublicSubnetZone
      CidrBlock: !Ref VpcPublicSubnetCidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${Client}-public
  RouteTableAssociationPublicSubnet:
    DependsOn: [PublicRouteTable, PublicSubnet]
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
  InstanceSecurityGroup:
    DependsOn: Vpc
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow only https ingress
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${Client}
  Instance:
    DependsOn: [RouteTableAssociationPublicSubnet, InstanceSecurityGroup]
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref Ec2KeyPairName
      ImageId: !Ref Ec2AmiId
      InstanceType: t2.small
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref Ec2IamInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get upgrade -y
          apt-get install -y python3-pip
          apt-get install -y jupyter-notebook

          touch /etc/systemd/system/jupyter.service
          echo "[Unit]" > /etc/systemd/system/jupyter.service
          echo "Description=Jupyter Notebook" >> /etc/systemd/system/jupyter.service
          echo "[Service]" >> /etc/systemd/system/jupyter.service
          echo "Type=simple" >> /etc/systemd/system/jupyter.service
          echo "ExecStart=/opt/jupyter/script/start.sh" >> /etc/systemd/system/jupyter.service
          echo "Restart=always" >> /etc/systemd/system/jupyter.service
          echo "RestartSec=10" >> /etc/systemd/system/jupyter.service
          echo "[Install]" >> /etc/systemd/system/jupyter.service
          echo "WantedBy=multi-user.target" >> /etc/systemd/system/jupyter.service

          mkdir -p /opt/jupyter/notebook
          mkdir -p /opt/jupyter/script
          touch /opt/jupyter/script/start.sh
          echo '#!/bin/bash' > /opt/jupyter/script/start.sh
          echo '/usr/bin/python3 -m notebook --NotebookApp.notebook_dir=/opt/jupyter/notebook --NotebookApp.allow_origin="*" --NotebookApp.password=$(/usr/bin/python3 -c "from notebook.auth import passwd; print(passwd(\"urubu100\"))") --allow-root --ip 0.0.0.0 --port 80' >> /opt/jupyter/script/start.sh
          chmod +x /opt/jupyter/script/start.sh

          mkdir -p /root/.jupyter
          echo "c.NotebookApp.password = u'$(/usr/bin/python3 -c "from notebook.auth import passwd; print(passwd('urubu100'))")'" > /root/.jupyter/jupyter_notebook_config.py

          systemctl daemon-reload
          systemctl start jupyter
          systemctl enable jupyter
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${Client}
  SqsRaw:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: adoptai-raw-dev-sqs
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 900
  SnsRaw:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: adoptai-raw-dev-sns
      Subscription:
        - Endpoint: !GetAtt SqsRaw.Arn
          Protocol: sqs
  # SqsClientSQL:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     QueueName: adoptai-client-sql-dev-sqs
  #     MessageRetentionPeriod: 1209600
  #     VisibilityTimeout: 900
  # SqsClientPredict:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     QueueName: adoptai-client-predict-dev-sqs
  #     MessageRetentionPeriod: 1209600
  #     VisibilityTimeout: 900
  # SnsClient:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     TopicName: adoptai-client-dev-sns
  #     Subscription:
  #       - Endpoint: !GetAtt SqsClientSQL.Arn
  #         Protocol: sqs
  #       - Endpoint: !GetAtt SqsClientPredict.Arn
  #         Protocol: sqs
  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
              - "sns:GetTopicAttributes"
            Principal: "*"
            Resource: "*"
      Topics:
        - !Ref SnsRaw
        # - !Ref SnsClient
  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SqsRaw
        # - !Ref SqsClientSQL
        # - !Ref SqsClientPredict
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: "*"
  Bucket1:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: adoptai-raw-dev
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref SnsRaw
            Event: s3:ObjectCreated:*
  Bucket2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: adoptai-trusted-dev
  BucketUtils:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: adoptai-utils-dev
      # PublicAccessBlockConfiguration:
      #   BlockPublicAcls: false
      #   IgnorePublicAcls: false
      #   BlockPublicPolicy: false
      #   RestrictPublicBuckets: false

  # BucketPolicy1:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref Bucket1
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Sid: PublicReadGetObject
  #           Effect: Allow
  #           Principal: "*"
  #           Action:
  #             - s3:GetObject
  #             - s3:ListBucket
  #           Resource:
  #             - !Sub "arn:aws:s3:::adoptai-raw-dev/*"
  #             - !Sub "arn:aws:s3:::adoptai-raw-dev"
  # BucketPolicy2:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref Bucket2
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Sid: PublicReadGetObject
  #           Effect: Allow
  #           Principal: "*"
  #           Action:
  #             - s3:GetObject
  #             - s3:ListBucket
  #           Resource:
  #             - !Sub "arn:aws:s3:::adoptai-trusted-dev/*"
  #             - !Sub "arn:aws:s3:::adoptai-trusted-dev"
  # BucketPolicy3:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref Bucket1
  #     PolicyDocument:
  #       Id: Policy1716672428211
  #       Version: "2012-10-17"
  #       Statement:
  #         - Sid: Stmt1716672427041
  #           Effect: Allow
  #           Principal: "*"
  #           Action: 
  #             - "s3:GetObject"
  #           Resource: 
  #             - !Sub "arn:aws:s3:::adoptai-raw-dev/*"

  LambdaRawTrusted:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 900
      MemorySize: 5120
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !Sub "arn:aws:iam::671399828934:role/LabRole"
      FunctionName: adoptai-raw-trusted-dev
      Layers:
        - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python38:7
      Environment:
        Variables:
          BUCKET_RAW: adoptai-raw-dev
          BUCKET_TRUSTED: adoptai-trusted-dev
      Code:
        S3Bucket: adoptai-utils-dev
        S3Key: lambda_zip/lambda_package_raw_trusted.zip
  RawPermissionInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaRawTrusted
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt SqsRaw.Arn
  LambdaRawTrustedEvent:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt SqsRaw.Arn
      FunctionName: adoptai-raw-trusted-dev
  # LambdaTrustedClient:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Timeout: 900
  #     MemorySize: 5120
  #     PackageType: Image
  #     Role: arn:aws:iam::671399828934:role/LabRole
  #     FunctionName: adoptai-trusted-client-dev
  #     Environment:
  #       Variables:
  #         BUCKET_TRUSTED: adoptai-trusted-dev
  #         BUCKET_CLIENT: adoptai-client-dev
  #     Code:
  #       ImageUri: "472105471754.dkr.ecr.us-east-1.amazonaws.com/trusted_client_dev:latest"
  # LambdaClientSQL:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Timeout: 900
  #     MemorySize: 10240
  #     Runtime: python3.8
  #     Handler: main.lambda_handler
  #     Role: arn:aws:iam::671399828934:role/LabRole
  #     FunctionName: adoptai-client-sql-dev
  #     Layers:
  #       - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python38:7
  #     Environment:
  #       Variables:
  #         PASSWORD: "Urubu100"
  #         SSL_MODE: "require"
  #         USERNAME: "adoptai_service"
  #         BUCKET_CLIENT: adoptai-client-dev
  #         HOSTNAME: "adoptai-database.mysql.database.azure.com"
  #     Code:
  #       S3Bucket: adoptai-utils-dev
  #       S3Key: lambda_zip/lambda_client_sql.zip
  # ClientSQLPermissionInvokeLambda:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref LambdaClientSQL
  #     Action: lambda:InvokeFunction
  #     Principal: sqs.amazonaws.com
  #     SourceArn: !GetAtt SqsClientSQL.Arn
  # LambdaClientSQLEvent:
  #   Type: AWS::Lambda::EventSourceMapping
  #   Properties:
  #     BatchSize: 1
  #     Enabled: true
  #     EventSourceArn: !GetAtt SqsClientSQL.Arn
  #     FunctionName: !Ref LambdaClientSQL
  # LambdaModelUpdate:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Timeout: 900
  #     MemorySize: 10240
  #     Runtime: python3.8
  #     Handler: main.lambda_handler
  #     Role: arn:aws:iam::671399828934:role/LabRole
  #     FunctionName: adoptai-model-update-dev
  #     Layers:
  #       - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python38:7
  #     Environment:
  #       Variables:
  #         BUCKET_CLIENT: adoptai-client-dev
  #         BUCKET_UTILS: adoptai-utils-dev
  #     Code:
  #       S3Bucket: adoptai-utils-dev
  #       S3Key: lambda_zip/lambda_package_model_update.zip
  # LambdaModelPredict:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Timeout: 900
  #     MemorySize: 10240
  #     Runtime: python3.8
  #     Handler: main.lambda_handler
  #     Role: arn:aws:iam::671399828934:role/LabRole
  #     FunctionName: adoptai-model-predict-dev
  #     Layers:
  #       - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python38:7
  #     Environment:
  #       Variables:
  #         BUCKET_CLIENT: adoptai-client-dev
  #         BUCKET_UTILS: adoptai-utils-dev
  #     Code:
  #       S3Bucket: adoptai-utils-dev
  #       S3Key: lambda_zip/lambda_package_model_predict.zip
  # ClientPredictPermissionInvokeLambda:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref LambdaModelPredict
  #     Action: lambda:InvokeFunction
  #     Principal: sqs.amazonaws.com
  #     SourceArn: !GetAtt SqsClientPredict.Arn
  # LambdaModelPredictEvent:
  #   Type: AWS::Lambda::EventSourceMapping
  #   Properties:
  #     BatchSize: 1
  #     Enabled: false
  #     EventSourceArn: !GetAtt SqsRaw.Arn
  #     FunctionName: !Ref LambdaModelPredict