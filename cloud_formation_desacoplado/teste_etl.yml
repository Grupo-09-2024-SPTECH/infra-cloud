AWSTemplateFormatVersion: 2010-09-09
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Global
        Parameters:
          - Client
    ParameterLabels:
      Client:
        default: Cliente
Parameters:
  Client:
    Type: String
    Description: O nome do cliente
    Default: sptech
Resources:
  SqsRaw:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: adoptai-raw-dev-b-sqs
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 900
    DependsOn: CustomResource

  SnsRaw:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: adoptai-raw-dev-b-sns
      Subscription:
        - Endpoint: !GetAtt SqsRaw.Arn
          Protocol: sqs
    DependsOn: CustomResource

  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
              - "sns:GetTopicAttributes"
            Principal: "*"
            Resource: "*"
      Topics:
        - !Ref SnsRaw
    DependsOn: CustomResource

  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SqsRaw
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: "*"
    DependsOn: CustomResource

  BucketRaw:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: adoptai-raw-dev-b
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref SnsRaw
            Event: s3:ObjectCreated:*
    DependsOn: CustomResource

  BucketTrusted:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: adoptai-trusted-dev-b
    DependsOn: CustomResource

  BucketUtils:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: adoptai-utils-dev-b

  CustomLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: python3.9
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import urllib.request
          import zipfile
          import os
          import cfnresponse

          def handler(event, context):
              try:
                  bucket_utils = os.environ['BUCKET_UTILS']

                  s3 = boto3.client('s3')

                  # URLs dos arquivos
                  python_url = "https://raw.githubusercontent.com/Grupo-09-2024-SPTECH/infra-cloud/main/Lambda%20Codes/raw_trusted/main.py"
                  package_url = "https://github.com/Grupo-09-2024-SPTECH/infra-cloud/raw/main/Lambda%20Codes/modules_python/sklearn.zip"
                  
                  # Caminhos temporários
                  python_file_path = "/tmp/main.py"
                  package_zip_path = "/tmp/sklearn.zip"
                  extracted_package_path = "/tmp/sklearn"
                  combined_zip_path = "/tmp/lambda_package_raw_trusted.zip"

                  # Baixar o arquivo Python
                  urllib.request.urlretrieve(python_url, python_file_path)

                  # Baixar o pacote de dependências
                  urllib.request.urlretrieve(package_url, package_zip_path)

                  # Descompactar o pacote de dependências
                  with zipfile.ZipFile(package_zip_path, 'r') as zip_ref:
                      zip_ref.extractall(extracted_package_path)

                  # Compactar o arquivo Python e as dependências em um único arquivo ZIP
                  with zipfile.ZipFile(combined_zip_path, 'w') as zipf:
                      # Adicionar o arquivo Python ao ZIP
                      zipf.write(python_file_path, 'raw_trusted/main.py')
                      # Adicionar as dependências ao ZIP
                      for root, dirs, files in os.walk(extracted_package_path):
                          for file in files:
                              file_path = os.path.join(root, file)
                              # Adicionar arquivos com o caminho relativo dentro do ZIP
                              arcname = os.path.relpath(file_path, extracted_package_path)
                              zipf.write(file_path, arcname=os.path.join('sklearn', arcname))

                  # Fazer o upload do arquivo ZIP para o S3
                  s3.upload_file(combined_zip_path, bucket_utils, 'lambda_zip/lambda_package_raw_trusted.zip')

                  # Enviar resposta de sucesso para o CloudFormation
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Message': 'Upload and zip successful'})

              except Exception as e:
                  # Em caso de falha, enviar resposta de falha para o CloudFormation
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Message': str(e)})

      Environment:
        Variables:
          BUCKET_UTILS: adoptai-utils-dev-b

  CustomResource:
    Type: Custom::UploadFile
    Properties:
      ServiceToken: !GetAtt CustomLambdaFunction.Arn
      BUCKET_UTILS: adoptai-utils-dev-b
    DependsOn: BucketUtils

  LambdaRawTrusted:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 900
      MemorySize: 5120
      Runtime: python3.8
      Handler: raw_trusted/main.lambda_handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      FunctionName: adoptai-raw-trusted-dev-b
      Layers:
        - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python38:7
      Environment:
        Variables:
          BUCKET_RAW: adoptai-raw-dev-b
          BUCKET_TRUSTED: adoptai-trusted-dev-b
      Code:
        S3Bucket: adoptai-utils-dev-b
        S3Key: lambda_zip/lambda_package_raw_trusted.zip
    DependsOn: CustomResource
  
  RawPermissionInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaRawTrusted
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt SqsRaw.Arn
    DependsOn: LambdaRawTrusted

  LambdaRawTrusteprodent:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt SqsRaw.Arn
      FunctionName: !Ref LambdaRawTrusted
    DependsOn: LambdaRawTrusted
