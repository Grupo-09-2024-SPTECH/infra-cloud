AWSTemplateFormatVersion: 2010-09-09
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Global
        Parameters:
          - Client
      - Label:
          default: VPC
        Parameters:
          - VpcCidr
          - VpcPublicSubnetZoneA
          - VpcPublicSubnetZoneB
          - VpcPublicSubnetCidrA
          - VpcPublicSubnetCidrB
      - Label:
          default: EC2
        Parameters:
          - Ec2KeyPairName
          - Ec2AmiId
          - Ec2IamInstanceProfile
          - Ec2JupyterPassword
    ParameterLabels:
      Client:
        default: Cliente
      VpcCidr:
        default: VPC CIDR
      VpcPublicSubnetCidrA:
        default: Subnet Publico CIDR
      VpcPublicSubnetCidrB:
        default: Subnet Publico CIDR
      VpcPublicSubnetZoneA:
        default: Zona da Subnet Publica
      VpcPublicSubnetZoneB:
        default: Zona da Subnet Publica
      Ec2KeyPairName:
        default: Chave de Acesso
      Ec2AmiId:
        default: AMI
      Ec2IamInstanceProfile:
        default: IAM Instance Profile Id
      Ec2JupyterPassword:
        default: Senha Jupyter
Parameters:
  Client:
    Type: String
    Description: O nome do cliente
    Default: sptech
  VpcCidr:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: O bloco CIDR da VPC (ex. 10.10.0.0/24)
    Default: 10.0.0.0/20
  VpcPublicSubnetCidrA:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: O bloco CIDR da Subnet Pública A (ex. 10.100.1.0/24)
    Default: 10.0.1.0/24
  VpcPublicSubnetZoneA:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: A zona de disponibilidade para criar a Subnet Pública A
    Default: us-east-1a
  VpcPublicSubnetCidrB:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: O bloco CIDR da Subnet Pública B (ex. 10.100.2.0/24)
    Default: 10.0.2.0/24
  VpcPublicSubnetZoneB:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: A zona de disponibilidade para criar a Subnet Pública B
    Default: us-east-1b
  Ec2KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Chave de acesso a instancia
  Ec2AmiId:
    Type: String
    Description: Id da AMI
    Default: ami-04b70fa74e45c3917 # Ubuntu 24.04
  Ec2IamInstanceProfile:
    Type: String
    Description: O nome do Instance Profile
    Default: EMR_EC2_DefaultRole
  Ec2JupyterPassword:
    Type: String
    NoEcho: true
    Description: A senha de acesso ao jupyter
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${Client}
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${Client}
  InternetGatewayAttachment:
    DependsOn: [InternetGateway, Vpc]
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  PublicRouteTable:
    DependsOn: Vpc
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${Client}-public
  PublicRouteTableRouteInternet:
    DependsOn: [PublicRouteTable, InternetGateway]
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref VpcPublicSubnetZoneA
      CidrBlock: !Ref VpcPublicSubnetCidrA
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${Client}-public-a
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref VpcPublicSubnetZoneB
      CidrBlock: !Ref VpcPublicSubnetCidrB
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${Client}-public-b
  RouteTableAssociationPublicSubnetA:
    DependsOn: [PublicRouteTable, PublicSubnetA]
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  RouteTableAssociationPublicSubnetB:
    DependsOn: [PublicRouteTable, PublicSubnetB]
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  InstanceSecurityGroup:
    DependsOn: Vpc
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow only https ingress
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${Client}
  Instance:
    DependsOn: [RouteTableAssociationPublicSubnetA, RouteTableAssociationPublicSubnetB, InstanceSecurityGroup]
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref Ec2KeyPairName
      ImageId: !Ref Ec2AmiId
      InstanceType: t2.small
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
      SubnetId: !Ref PublicSubnetA
      IamInstanceProfile: !Ref Ec2IamInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get upgrade -y
          apt-get install -y python3-pip
          apt-get install -y jupyter-notebook

          touch /etc/systemd/system/jupyter.service
          echo "[Unit]" > /etc/systemd/system/jupyter.service
          echo "Description=Jupyter Notebook" >> /etc/systemd/system/jupyter.service
          echo "[Service]" >> /etc/systemd/system/jupyter.service
          echo "Type=simple" >> /etc/systemd/system/jupyter.service
          echo "ExecStart=/opt/jupyter/script/start.sh" >> /etc/systemd/system/jupyter.service
          echo "Restart=always" >> /etc/systemd/system/jupyter.service
          echo "RestartSec=10" >> /etc/systemd/system/jupyter.service
          echo "[Install]" >> /etc/systemd/system/jupyter.service
          echo "WantedBy=multi-user.target" >> /etc/systemd/system/jupyter.service

          mkdir -p /opt/jupyter/notebook
          mkdir -p /opt/jupyter/script
          touch /opt/jupyter/script/start.sh
          echo '#!/bin/bash' > /opt/jupyter/script/start.sh
          echo '/usr/bin/python3 -m notebook --NotebookApp.notebook_dir=/opt/jupyter/notebook --NotebookApp.allow_origin="*" --NotebookApp.password=$(/usr/bin/python3 -c "from notebook.auth import passwd; print(passwd(\"urubu100\"))") --allow-root --ip 0.0.0.0 --port 80' >> /opt/jupyter/script/start.sh
          chmod +x /opt/jupyter/script/start.sh

          mkdir -p /root/.jupyter
          echo "c.NotebookApp.password = u'$(/usr/bin/python3 -c "from notebook.auth import passwd; print(passwd('urubu100'))")'" > /root/.jupyter/jupyter_notebook_config.py

          systemctl daemon-reload
          systemctl start jupyter
          systemctl enable jupyter
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${Client}
  SqsRaw:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: adoptai-raw-dev-sqs
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 900
  SnsRaw:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: adoptai-raw-dev-sns
      Subscription:
        - Endpoint: !GetAtt SqsRaw.Arn
          Protocol: sqs
  # SqsTrusted:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     QueueName: adoptai-trusted-dev-sqs
  #     MessageRetentionPeriod: 1209600
  #     VisibilityTimeout: 900
  # SnsTrusted:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     TopicName: adoptai-trusted-dev-sns
  #     Subscription:
  #       - Endpoint: !GetAtt SqsTrusted.Arn
  #         Protocol: sqs
  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
              - "sns:GetTopicAttributes"
            Principal: "*"
            Resource: "*"
      Topics:
        - !Ref SnsRaw
        # - !Ref SnsTrusted
  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SqsRaw
        # - !Ref SqsTrusted
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: "*"
  Bucket1:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: adoptai-raw-dev
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref SnsRaw
            Event: s3:ObjectCreated:*
  Bucket2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: adoptai-trusted-dev
  # Bucket3:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: adoptai-client-dev
  # LambdaRawTrusted:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Timeout: 900
  #     MemorySize: 5120
  #     Runtime: python3.8
  #     Handler: raw_trusted/main.lambda_handler
  #     Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
  #     FunctionName: adoptai-raw-trusted-dev
  #     Layers:
  #       - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python38:7
  #     Environment:
  #       Variables:
  #         BUCKET_RAW: adoptai-raw-dev
  #         BUCKET_TRUSTED: adoptai-trusted-dev
  #         # TRUSTED_CLIENT_TOPIC_ARN: !Ref SnsTrusted
  #     Code:
  #       S3Bucket: adoptai-utils-prod
  #       S3Key: lambda_zip/lambda_package_raw_trusted.zip
  # RawPermissionInvokeLambda:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref LambdaRawTrusted
  #     Action: lambda:InvokeFunction
  #     Principal: sqs.amazonaws.com
  #     SourceArn: !GetAtt SqsRaw.Arn
  # LambdaRawTrustedEvent:
  #   Type: AWS::Lambda::EventSourceMapping
  #   Properties:
  #     BatchSize: 1
  #     Enabled: true
  #     EventSourceArn: !GetAtt SqsRaw.Arn
  #     FunctionName: !Ref LambdaRawTrusted
  # LambdaTrustedClient:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Timeout: 900
  #     MemorySize: 10240
  #     PackageType: Image
  #     Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
  #     FunctionName: adoptai-trusted-client-dev
  #     Environment:
  #       Variables:
  #         USERNAME: admin
  #         PASSWORD: adoptai123$
  #         BUCKET_CLIENT: adoptai-client-dev
  #         BUCKET_TRUSTED: adoptai-trusted-dev
  #         HOSTNAME: adoptai.ckgyxtx5gtaw.us-east-1.rds.amazonaws.com
  #     Code:
  #       ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/trusted_client_adoptai_dev:latest"
  # TrustedPermissionInvokeLambda:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref LambdaTrustedClient
  #     Action: lambda:InvokeFunction
  #     Principal: sqs.amazonaws.com
  #     SourceArn: !GetAtt SqsTrusted.Arn
  # LambdaTrustedClientEvent:
  #   Type: AWS::Lambda::EventSourceMapping
  #   Properties:
  #     BatchSize: 1
  #     Enabled: true
  #     EventSourceArn: !GetAtt SqsTrusted.Arn
  #     FunctionName: !Ref LambdaTrustedClient
  #     FunctionName: !Ref LambdaTrustedClient